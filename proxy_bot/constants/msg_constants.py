from datetime import datetime
from typing import Any

from proxy_bot.settings import settings


class ShortButton:
    BACK = 'üîô –ù–∞–∑–∞–¥'
    work = 'üë®‚Äçüíª –î–ª—è –≤–æ—Ä–∫–∞'
    scrolling = 'ü§î –î–ª—è —Å–∫—Ä–æ–ª–ª–∏–Ω–≥–∞'
    MAIN_PAGE = "üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é"
    CANCEL = "‚ùå –û—Ç–º–µ–Ω–∞"
    AMOUNT_FOR_PAY = 'üíµ –û–ø–ª–∞—Ç–∏—Ç—å {amount} USDT'
    BACK_IN_BOT = f"{BACK} {settings.NAME_BOT}"
    BACK_PROFILE = {BACK: 'profile'}
    BUY_WITH_DISCOUNT = "üìâ –ö—É–ø–∏—Ç—å —Å–æ —Å–∫–∏–¥–∫–æ–π {discount}%"



class CreatorMessages:
    text: str = ''
    buttons = [] or {}
    size: int = 1

    @staticmethod
    def create_text(data: Any):
        pass

    @staticmethod
    def create_buttons(data: Any):
        pass


#  messages for start page

class Start(CreatorMessages):
    text = ("üëã –ü—Ä–∏–≤–µ—Ç, {username}\n\n"
            "<u>‚ùó–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ–∑–Ω–∞–∫–æ–º—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –Ω–∞—à–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞, –º–æ–∂–µ—à—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å</u> "
            f"<a href='{settings.URL_RULES}'>üëâ "
            "–¢–£–¢</a>")
    buttons = ['üë®üèº‚Äçüíª –ü—Ä–æ—Ñ–∏–ª—å', 'üîê –ê—Ä–µ–Ω–¥–∞ –ø—Ä–æ–∫—Å–∏',
               'üî§ –£–Ω–∏–∫–∞–ª–∏–∑–∞—Ç–æ—Ä', 'üßë‚Äçüíª –ü—Ä–æ–º–æ–∫–æ–¥—ã']


class UserNotMember(CreatorMessages):
    text = "üëÅ –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–æ–º, —Ç–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª –Ω–∏–∂–µ! üëá"
    buttons = {f'–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è {settings.CHAT_NAME}': settings.CHAT_SUB_LINK,
               '‚úÖ –ü–æ–¥–ø–∏—Å–∞–ª—Å—è': 'check_subscribe'}


class UserNotSubscribe(UserNotMember):
    text = "‚ùå –í—ã –º–µ–Ω—è –Ω–µ –æ–±–º–∞–Ω–µ—Ç–µ! –¢–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª –Ω–∏–∂–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–æ–º! üëá"


class IfUserBlocked(CreatorMessages):
    text = "‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∞ –≤–∞—Å –≤ –±–æ—Ç–µ!"


class ForAdminAfterRegistration(CreatorMessages):
    text = ("‚ùóÔ∏è–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username}\n\n"
            "–¢–æ–ª—å–∫–æ —á—Ç–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –≤ –±–æ—Ç–µ!\n"
            f"{datetime.now().strftime('%d-%m-%Y %H:%M')}")


class AdminPanel(CreatorMessages):
    text = "<b>üè¶ –ú–ï–ù–Æ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê üè¶</b>"
    buttons = ['üì® –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É', '‚ùì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ',
               'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞', 'üëë –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
               'üí∞ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥', '‚öô –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏',
               '‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–æ—Ç–æ']


# _______________________________________________________________________________________________________________________

# messages for profile page

class MainProfile(CreatorMessages):
    buttons = {
        'üóÑ –í–∞—à–∏ –ø–æ–∫—É–ø–∫–∏': 'purchases',
        'üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å': 'payment',
        'üó£ –ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É': 'msg_admin',
        'üè¶ –°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ –∏ —Ä–µ–∫–ª–∞–º–∞': 'advertising'
    }

    @staticmethod
    def create_text(user_data: dict):
        return (f"<b>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user_data['username']}\n\n"
                f"üè¶ –í–∞—à –±–∞–ª–∞–Ω—Å: {user_data['balance']} RUB\n\n"
                f"ü§å –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫: {user_data['purchase_count']}\n\n"
                f"üí∏ –î–æ—Ö–æ–¥ –æ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {user_data['referral_income']}\n\n"
                f"üë• –í—Å–µ–≥–æ –≤–∞—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {user_data['referral_count']}\n\n"
                f"üôãüèª‚Äç‚ôÇÔ∏è –í–∞—à id: {user_data['user_id']}\n\n"
                f"‚ô® –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: <code>{settings.HREF_REF}{user_data['user_id']}</code></b>\n\n"
                f"ü§ë <b>–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞ –±–∞–ª–∞–Ω—Å {settings.PERCENTAGE_FROM_REF * 100}% –æ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π "
                "–≤–∞—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤!</b>")


class UserPurchasesPage(CreatorMessages):
    @staticmethod
    def create_buttons(list_purchases: list):
        buttons = {}
        size = 1
        if len(list_purchases) > 10:
            size = 2
            list_purchases = list_purchases[-10:]
        for item, purchase in enumerate(list_purchases):
            buttons[f'{item + 1}. {purchase.purchase_time.strftime("%d-%m-%Y")}'] = f'purchase_user:{purchase.id}'
        return buttons | ShortButton.BACK_PROFILE, size

    @staticmethod
    def create_text(list_purchases: list):
        if list_purchases:
            return "<b>–í–æ—Ç –≤–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏.</b>"
        return "<b>–£ –≤–∞—Å –Ω–µ –±—ã–ª–æ –ø–æ–∫—É–ø–æ–∫... üò¢</b>"


class ForSinglePurchase(CreatorMessages):
    buttons = {ShortButton.BACK: 'purchases'}

    @staticmethod
    def create_text(data_purchase: dict):
        if len(data_purchase) == 8:
            return (f"–¢–æ–≤–∞—Ä: {data_purchase['product_name']}\n\n"
                    f"–¶–µ–Ω–∞: {data_purchase['amount']} RUB\n"
                    f"–°—Ç—Ä–∞–Ω–∞: {data_purchase['country']}\n"
                    f"–ì–æ—Ä–æ–¥: {data_purchase['city']}\n"
                    f"–î–∞–Ω–Ω—ã–µ: <code>{data_purchase['host']}:{data_purchase['port']}:{data_purchase['username']}:{data_purchase['password']}</code>"
                    )
        else:
            return (f"–¢–æ–≤–∞—Ä: {data_purchase['product_name']}\n\n"
                    f"–¶–µ–Ω–∞: {data_purchase['amount']} RUB\n"
                    f"–°—Ç—Ä–∞–Ω–∞: {data_purchase['country']}\n"
                    f"–î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏: {data_purchase['purchase_time']}\n"
                    f"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {data_purchase['end_time']}\n\n"
                    f"HTTP: <code>{data_purchase['host']}:{data_purchase['port']}:{data_purchase['username']}:{data_purchase['password']}</code>\n"
                    f"SOCKS5: <code>{data_purchase['host']}:{data_purchase['port_socks']}:{data_purchase['username']}:{data_purchase['password']}</code>")















if __name__ == '__main__':
    print(IfUserBlocked.__dict__)
