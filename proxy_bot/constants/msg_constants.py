from abc import ABC, abstractmethod
from datetime import datetime
from typing import Optional, Union

from proxy_bot.settings import settings


class ShortButton:
    BACK = 'üîô –ù–∞–∑–∞–¥'
    work = 'üë®‚Äçüíª –î–ª—è –≤–æ—Ä–∫–∞'
    scrolling = 'ü§î –î–ª—è —Å–∫—Ä–æ–ª–ª–∏–Ω–≥–∞'
    MAIN_PAGE = "üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é"
    CANCEL = "‚ùå –û—Ç–º–µ–Ω–∞"
    AMOUNT_FOR_PAY = 'üíµ –û–ø–ª–∞—Ç–∏—Ç—å {amount} USDT'
    BACK_IN_BOT = f"{BACK} {settings.NAME_BOT}"
    BACK_PROFILE = {BACK: 'profile'}
    BUY_WITH_DISCOUNT = "üìâ –ö—É–ø–∏—Ç—å —Å–æ —Å–∫–∏–¥–∫–æ–π {discount}%"


class CreatorMessages(ABC):
    def __init__(self, *args, **kwargs):
        self.args = args
        self.kwargs = kwargs
        self.size = 1

    @abstractmethod
    def text(self):
        pass

    @abstractmethod
    def buttons(self):
        pass

    def __repr__(self):
        return f'{self.text}\n{self.buttons}\n{self.size}'

    def __call__(self):
        return {"text": self.text(), "buttons": self.buttons(), "size": self.size}


#  messages for start page

class Start(CreatorMessages):
    def text(self) -> str:
        return (f"üëã –ü—Ä–∏–≤–µ—Ç, {self.kwargs['username']}\n\n"
                "<u>‚ùó–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ–∑–Ω–∞–∫–æ–º—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –Ω–∞—à–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞, –º–æ–∂–µ—à—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å</u> "
                f"<a href='{settings.URL_RULES}'>üëâ "
                "–¢–£–¢</a>")

    def buttons(self) -> Optional[Union[dict, list]]:
        self.size = 2
        return ['üë®üèº‚Äçüíª –ü—Ä–æ—Ñ–∏–ª—å', 'üîê –ê—Ä–µ–Ω–¥–∞ –ø—Ä–æ–∫—Å–∏',
                'üî§ –£–Ω–∏–∫–∞–ª–∏–∑–∞—Ç–æ—Ä', 'üßë‚Äçüíª –ü—Ä–æ–º–æ–∫–æ–¥—ã']


class UserNotMember(CreatorMessages):
    def text(self):
        return "üëÅ –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–æ–º, —Ç–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª –Ω–∏–∂–µ! üëá"

    def buttons(self):
        return {f'–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è {settings.CHAT_NAME}': settings.CHAT_SUB_LINK,
                '‚úÖ –ü–æ–¥–ø–∏—Å–∞–ª—Å—è': 'check_subscribe'}


class UserNotSubscribe(UserNotMember):
    def text(self):
        return "‚ùå –í—ã –º–µ–Ω—è –Ω–µ –æ–±–º–∞–Ω–µ—Ç–µ! –¢–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª –Ω–∏–∂–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–æ–º! üëá"

    def buttons(self):
        super().buttons()


class IfUserBlocked(CreatorMessages):
    def text(self):
        return "‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∞ –≤–∞—Å –≤ –±–æ—Ç–µ!"

    def buttons(self):
        return None


class ForAdminAfterRegistration(CreatorMessages):
    def text(self):
        username = self.kwargs['username']
        return (f"‚ùóÔ∏è–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username}\n\n"
                "–¢–æ–ª—å–∫–æ —á—Ç–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –≤ –±–æ—Ç–µ!\n"
                f"{datetime.now().strftime('%d-%m-%Y %H:%M')}")

    def buttons(self):
        return None


class AdminPanel(CreatorMessages):
    def text(self):
        return "<b>üè¶ –ú–ï–ù–Æ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê üè¶</b>"

    def buttons(self):
        self.size = 2
        return ['üì® –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É', '‚ùì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ',
                   'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞', 'üëë –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
                   'üí∞ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥', '‚öô –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏',
                   '‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–æ—Ç–æ']


# _______________________________________________________________________________________________________________________

# messages for profile page

class MainProfile(CreatorMessages):

    def text(self):
        user_data = self.kwargs['user_data']
        return (f"<b>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user_data['username']}\n\n"
                f"üè¶ –í–∞—à –±–∞–ª–∞–Ω—Å: {user_data['balance']} RUB\n\n"
                f"ü§å –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫: {user_data['purchase_count']}\n\n"
                f"üí∏ –î–æ—Ö–æ–¥ –æ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {user_data['referral_income']}\n\n"
                f"üë• –í—Å–µ–≥–æ –≤–∞—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {user_data['referral_count']}\n\n"
                f"üôãüèª‚Äç‚ôÇÔ∏è –í–∞—à id: {user_data['user_id']}\n\n"
                f"‚ô® –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: <code>{settings.HREF_REF}{user_data['user_id']}</code></b>\n\n"
                f"ü§ë <b>–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞ –±–∞–ª–∞–Ω—Å {settings.PERCENTAGE_FROM_REF * 100}% –æ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π "
                "–≤–∞—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤!</b>")

    def buttons(self):
        return {
            'üóÑ –í–∞—à–∏ –ø–æ–∫—É–ø–∫–∏': 'purchases',
            'üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å': 'payment',
            'üó£ –ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É': 'msg_admin',
            'üè¶ –°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ –∏ —Ä–µ–∫–ª–∞–º–∞': 'advertising'
        }


class UserPurchasesPage(CreatorMessages):
    def text(self):
        if self.kwargs['list_purchases']:
            return "<b>–í–æ—Ç –≤–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏.</b>"
        return "<b>–£ –≤–∞—Å –Ω–µ –±—ã–ª–æ –ø–æ–∫—É–ø–æ–∫... üò¢</b>"

    def buttons(self):
        list_purchases = self.kwargs['list_purchases']
        buttons = {}
        self.size = 1
        if len(list_purchases) > 10:
            self.size = 2
            list_purchases = list_purchases[-10:]
        for item, purchase in enumerate(list_purchases):
            buttons[f'{item + 1}. {purchase.purchase_time.strftime("%d-%m-%Y")}'] = f'purchase_user:{purchase.id}'
        return buttons | ShortButton.BACK_PROFILE




class ForSinglePurchase(CreatorMessages):

    def text(self):
        data_purchase = self.kwargs['data_purchase']
        if len(data_purchase) == 8:
            return ("–¢–æ–≤–∞—Ä: {product_name}\n\n"
                    "–¶–µ–Ω–∞: {amount} RUB\n"
                    "–°—Ç—Ä–∞–Ω–∞: {country}\n"
                    "–ì–æ—Ä–æ–¥: {city}\n"
                    "–î–∞–Ω–Ω—ã–µ: <code>{host}:{port}:{username}:{password}</code>"
                    ).format(**data_purchase)
        else:
            return ("–¢–æ–≤–∞—Ä: {product_name}\n\n"
                    "–¶–µ–Ω–∞: {amount} RUB\n"
                    "–°—Ç—Ä–∞–Ω–∞: {country}\n"
                    "–î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏: {purchase_time}\n"
                    "–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {end_time}\n\n"
                    "HTTP: <code>{host}:{port}:{username}:{password}</code>\n"
                    "SOCKS5: <code>{host}:{port_socks}:{username}:{password}</code>").format(**data_purchase)

    def buttons(self):
        return {ShortButton.BACK: 'purchases'}


class ChoosePayment(CreatorMessages):
    def text(self):
        return "<b>–í—ã –±–µ—Ä–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –æ–ø–ª–∞—Ç—ã</b>"

    def buttons(self):
        return {'ü™ô CryptoBot': 'cryptobot',
                'üí∂ YooMoney': 'yoomoney',
                'üöÄ xRocket': 'xrocket',
                   ShortButton.BACK: "profile"}


class WriteToAdministration:
    to_admin = '<b>–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É</b>'
    about_adv = '<b>–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—Å—á–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞</b>'
    message_send = '<b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!</b>'
    back_profile = ShortButton.BACK_PROFILE


# _______________________________________________________________________________________________________________________

# payments page

class ChoicePayment(CreatorMessages):
    def text(self):
        if self.kwargs['payment'] == 'cryptobot':
            return ('<b>‚ôªÔ∏è –û–ø–ª–∞—Ç–∞ –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å—Å—è —á–µ—Ä–µ–∑</b> <a href="https://t.me/CryptoBot">CryptoBot</a> \n'
                    '<b>‚ùó –í–∞–ª—é—Ç–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã:</b> <i>RUB</i>\n\n'
                    '‚úçÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:</b>')
        elif self.kwargs['payment'] == 'yoomoney':
            return ('<b>‚ôªÔ∏è –û–ø–ª–∞—Ç–∞ –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å—Å—è —á–µ—Ä–µ–∑</b> <a href="https://yoomoney.ru">YooMoney</a> \n'
                    '<b>‚ùó –í–∞–ª—é—Ç–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã:</b> <i>RUB</i>\n\n'
                    '‚úçÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:</b>')
        else:
            return ('<b>‚ôªÔ∏è –û–ø–ª–∞—Ç–∞ –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å—Å—è —á–µ—Ä–µ–∑</b> <a href="https://t.me/@tonRocketBot">xRocket</a> \n'
                    '<b>‚ùó –í–∞–ª—é—Ç–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã:</b> <i>RUB</i>\n\n'
                    '‚úçÔ∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–µ—Ç—É –¥–ª—è –æ–ø–ª–∞—Ç—ã:</b>')

    def buttons(self):
        back_payment_button = {ShortButton.BACK: 'payment'}
        if self.kwargs['payment'] == 'cryptobot' or self.kwargs['payment'] == 'yoomoney':
            return back_payment_button
        else:
            self.size = 2
            x_buttons = {}
            currencies = ["XROCK", "TONCOIN", "BTC", "USDT", "TRX", "ETH", "BNB"]
            for cur in currencies:
                x_buttons[cur] = f'x_cur:{cur}'
            return x_buttons | back_payment_button


class ForXrocket(CreatorMessages):
    def text(self):
        return ('<b>‚ôªÔ∏è –û–ø–ª–∞—Ç–∞ –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å—Å—è —á–µ—Ä–µ–∑</b> <a href="https://t.me/@tonRocketBot">xRocket</a> \n'
                f'<b>‚ùó –í–∞–ª—é—Ç–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã:</b> <i>{self.kwargs['currency']}</i>\n\n'
                '‚úçÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:</b>')

    def buttons(self):
        return {ShortButton.BACK: 'xrocket'}


class PaymentMessage(CreatorMessages):
    def text(self):
        amount = self.kwargs["amount"]
        currency = self.kwargs.get("currency")
        if currency is None:
            currency = "RUB"
        return f"<b>–û–ø–ª–∞—Ç–∏—Ç–µ {amount} {currency} –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ!</b>"

    def buttons(self):
        url = self.kwargs["invoice_url"]
        amount = self.kwargs["amount"]
        currency = self.kwargs.get("currency")
        if currency is None:
            currency = "RUB"
        return {f"–û–ø–ª–∞—Ç–∏—Ç—å {amount} {currency}": url,
                ShortButton.BACK: "payment"}


class UpBalance(CreatorMessages):

    def text(self):
        amount = self.kwargs['amount']
        return f"<b>–í–∞—à –±–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ —Å—É–º–º—É {amount} RUB</b>"

    def buttons(self):
        return ShortButton.BACK_PROFILE


class NoPayment(CreatorMessages):

    def text(self):
        return "<b>–ü–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ –≤–∞—à –ø–ª–∞—Ç–µ–∂ –Ω–µ –ø—Ä–æ—à–µ–ª –∏–ª–∏ –Ω–µ –±—ã–ª –æ–ø–ª–∞—á–µ–Ω.</b>"

    def buttons(self):
        return None


# _______________________________________________________________________________________________________________________

# unique_page_messages

class MainMessageUnique(CreatorMessages):

    def text(self):
        return ('<b>‚úç –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –µ–≥–æ —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏–∏:</b>\n\n'
                '<i>–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ</i>')

    def buttons(self):
        return None


class GoodUniqueMessage(CreatorMessages):

    def text(self):
        counter = self.kwargs.get('counter', False)
        unique_text = self.kwargs['unique_text']
        if counter:
            return (f'<b>–£–Ω–∏–∫–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç - {counter}</b>\n\n'
                    f'<code>{unique_text}</code>')
        return ('<b>–£–Ω–∏–∫–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç</b>\n\n'
                f'<code>{unique_text}</code>')

    def buttons(self):
        return {'‚ùî –ü–µ—Ä–µ—É–Ω–∏–∫–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å?': 'unique_again'}


class WrongUniqueMessage(CreatorMessages):

    def text(self):
        return '<b>–í—ã –¥–æ–ª–∂–Ω—ã –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç!!!</b>'

    def buttons(self):
        return None


# _______________________________________________________________________________________________________________________

# Discount page

class GetDiscountNameMessage(CreatorMessages):

    def text(self):
        return '<b>‚úç –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ —Å–∫–∏–¥–∫—É: </b>'

    def buttons(self):
        return None


class DiscountActivateSuccess(CreatorMessages):

    def text(self):
        percentage = self.kwargs['percentage'] * 100
        return f"–í—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —Å–∫–∏–¥–∫—É {percentage}%!"

    def buttons(self):
        return None























if __name__ == '__main__':
    print(IfUserBlocked.__dict__)
