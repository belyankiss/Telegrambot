from datetime import datetime
from typing import Optional, Union

from proxy_bot.constants.load_constants import Constant
from proxy_bot.db.models import ProxyWork, ProxySort
from proxy_bot.helpers import countries_dict, pagination
from proxy_bot.settings import settings


class ShortButton:
    BACK = 'üîô –ù–∞–∑–∞–¥'
    work = 'üë®‚Äçüíª Work mode'
    sort = 'üó∫ Work mode (sort)'
    scrolling = 'ü§î Scrolling'
    MAIN_PAGE = "üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é"
    CANCEL = "‚ùå –û—Ç–º–µ–Ω–∞"
    AMOUNT_FOR_PAY = 'üíµ –û–ø–ª–∞—Ç–∏—Ç—å {amount} USDT'
    BACK_IN_BOT = f"{BACK} {settings.NAME_BOT}"
    BACK_PROFILE = {BACK: 'profile'}
    BUY_WITH_DISCOUNT = "üìâ –ö—É–ø–∏—Ç—å —Å–æ —Å–∫–∏–¥–∫–æ–π {discount}%"
    BACK_SORT = {BACK: "sorted_work"}
    PROXYLINE_WORK = {"‚úÖ –°—á–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω!": "proxyline_work"}


class MenuButton:
    PROFILE = 'üë®üèº‚Äçüíª –ü—Ä–æ—Ñ–∏–ª—å'
    UNIQUE = 'üî§ –£–Ω–∏–∫–∞–ª–∏–∑–∞—Ç–æ—Ä'
    PROXIES = 'üîê –ê—Ä–µ–Ω–¥–∞ –ø—Ä–æ–∫—Å–∏'
    DISCOUNT = 'üßë‚Äçüíª –ü—Ä–æ–º–æ–∫–æ–¥—ã'



class CreatorMessages:
    text: Optional[str] = None
    buttons: Optional[Union[list, dict]] = None
    size: int = None

    def __init__(self, *args, **kwargs):
        self.args = args
        self.kwargs = kwargs
        self.size = 1
        self.photo = Constant.PHOTOS.get('default', False)
        self.text = self.create_text() or type(self).text
        self.buttons = self.create_buttons() or type(self).buttons

    def create_text(self) -> Optional[str]:
        return None

    def create_buttons(self) -> Optional[Union[list, dict]]:
        return None

    def __repr__(self):
        return f'{self.text}\n{self.buttons}\n{self.size}'

    def __call__(self):
        size = type(self).size if type(self).size is not None else self.size
        return {"text": self.text, "buttons": self.buttons, "size": size}


#  messages for start page

class Start(CreatorMessages):
    def create_text(self) -> str:
        self.photo = Constant.PHOTOS.get('menu', False)
        return (f"üëã –ü—Ä–∏–≤–µ—Ç, {self.kwargs['username']}\n\n"
                "<u>‚ùó–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ–∑–Ω–∞–∫–æ–º—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –Ω–∞—à–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞, –º–æ–∂–µ—à—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å</u> "
                f"<a href='{settings.URL_RULES}'>üëâ "
                "–¢–£–¢</a>")

    def create_buttons(self) -> Optional[Union[dict, list]]:
        self.size = 2
        return [MenuButton.PROFILE, MenuButton.PROXIES,
                MenuButton.UNIQUE, MenuButton.DISCOUNT]


class UserNotMember(CreatorMessages):
    photo = Constant.PHOTOS.get('default', False)
    text = "üëÅ –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–æ–º, —Ç–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª –Ω–∏–∂–µ! üëá"
    buttons = {f'–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è {settings.CHAT_NAME}': settings.CHAT_SUB_LINK,
                '‚úÖ –ü–æ–¥–ø–∏—Å–∞–ª—Å—è': 'check_subscribe'}


class UserNotSubscribe(CreatorMessages):
    text = "‚ùå –í—ã –º–µ–Ω—è –Ω–µ –æ–±–º–∞–Ω–µ—Ç–µ! –¢–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª –Ω–∏–∂–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–æ–º! üëá"
    buttons = UserNotMember.buttons



class IfUserBlocked(CreatorMessages):
    text = "‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∞ –≤–∞—Å –≤ –±–æ—Ç–µ!"



class ForAdminAfterRegistration(CreatorMessages):
    def create_text(self):
        username = self.kwargs['username']
        return (f"‚ùóÔ∏è–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username}\n\n"
                "–¢–æ–ª—å–∫–æ —á—Ç–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –≤ –±–æ—Ç–µ!\n"
                f"{datetime.now().strftime('%d-%m-%Y %H:%M')}")



class AdminPanel(CreatorMessages):
    size = 2

    def create_text(self) -> Optional[str]:
        self.photo = Constant.PHOTOS.get('menu', False)
        return "<b>üè¶ –ú–ï–ù–Æ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê üè¶</b>"

    def create_buttons(self) -> Optional[Union[list, dict]]:
        self.size = 2
        return ['üì® –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É', '‚ùì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ',
                'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞', 'üëë –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
                'üí∞ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥', '‚öô –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏',
                '‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–æ—Ç–æ']




# _______________________________________________________________________________________________________________________

# messages for profile page

class MainProfile(CreatorMessages):
    def create_text(self):
        user_data = self.kwargs['user_data']
        return (f"<b>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user_data['username']}\n\n"
                f"üè¶ –í–∞—à –±–∞–ª–∞–Ω—Å: {user_data['balance']} RUB\n\n"
                f"ü§å –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫: {user_data['purchase_count']}\n\n"
                f"üí∏ –î–æ—Ö–æ–¥ –æ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {user_data['referral_income']}\n\n"
                f"üë• –í—Å–µ–≥–æ –≤–∞—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {user_data['referral_count']}\n\n"
                f"üôãüèª‚Äç‚ôÇÔ∏è –í–∞—à id: {user_data['user_id']}\n\n"
                f"‚ô® –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: <code>{settings.HREF_REF}{user_data['user_id']}</code></b>\n\n"
                f"ü§ë <b>–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞ –±–∞–ª–∞–Ω—Å {settings.PERCENTAGE_FROM_REF * 100}% –æ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π "
                "–≤–∞—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤!</b>")

    buttons = {
            'üóÑ –í–∞—à–∏ –ø–æ–∫—É–ø–∫–∏': 'purchases',
            'üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å': 'payment',
            'üó£ –ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É': 'msg_admin',
            'üè¶ –°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ –∏ —Ä–µ–∫–ª–∞–º–∞': 'advertising'
        }


class UserPurchasesPage(CreatorMessages):
    def create_text(self):
        if self.kwargs['list_purchases']:
            return "<b>–í–æ—Ç –≤–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏.</b>"
        return "<b>–£ –≤–∞—Å –Ω–µ –±—ã–ª–æ –ø–æ–∫—É–ø–æ–∫... üò¢</b>"

    def create_buttons(self):
        list_purchases = self.kwargs['list_purchases']
        buttons = {}
        self.size = 1
        if len(list_purchases) > 10:
            self.size = 2
            list_purchases = list_purchases[-10:]
        for item, purchase in enumerate(list_purchases):
            buttons[f'{item + 1}. {purchase.purchase_time.strftime("%d-%m-%Y")}'] = f'purchase_user:{purchase.id}'
        return buttons | ShortButton.BACK_PROFILE




class ForSinglePurchase(CreatorMessages):
    def create_text(self):
        data_purchase = self.kwargs['data_purchase']
        if len(data_purchase) == 8:
            return ("–¢–æ–≤–∞—Ä: {product_name}\n\n"
                    "–¶–µ–Ω–∞: {amount} RUB\n"
                    "–°—Ç—Ä–∞–Ω–∞: {country}\n"
                    "–ì–æ—Ä–æ–¥: {city}\n"
                    "–î–∞–Ω–Ω—ã–µ: <code>{host}:{port}:{username}:{password}</code>"
                    ).format(**data_purchase)
        else:
            return ("–¢–æ–≤–∞—Ä: {product_name}\n\n"
                    "–¶–µ–Ω–∞: {amount} RUB\n"
                    "–°—Ç—Ä–∞–Ω–∞: {country}\n"
                    "–î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏: {purchase_time}\n"
                    "–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {end_time}\n\n"
                    "HTTP: <code>{host}:{port}:{username}:{password}</code>\n"
                    "SOCKS5: <code>{host}:{port_socks}:{username}:{password}</code>").format(**data_purchase)

    buttons = {ShortButton.BACK: 'purchases'}


class ChoosePayment(CreatorMessages):
    text = "<b>–í—ã –±–µ—Ä–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –æ–ø–ª–∞—Ç—ã</b>"

    buttons = {'ü™ô CryptoBot': 'cryptobot',
                'üí∂ YooMoney': 'yoomoney',
                'üöÄ xRocket': 'xrocket',
                   ShortButton.BACK: "profile"}


class WriteToAdministration:
    to_admin = '<b>–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É</b>'
    about_adv = '<b>–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—Å—á–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞</b>'
    message_send = '<b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!</b>'
    back_profile = ShortButton.BACK_PROFILE


# _______________________________________________________________________________________________________________________

# payments page

class ChoicePayment(CreatorMessages):
    def create_text(self):
        if self.kwargs['payment'] == 'cryptobot':
            return ('<b>‚ôªÔ∏è –û–ø–ª–∞—Ç–∞ –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å—Å—è —á–µ—Ä–µ–∑</b> <a href="https://t.me/CryptoBot">CryptoBot</a> \n'
                    '<b>‚ùó –í–∞–ª—é—Ç–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã:</b> <i>RUB</i>\n\n'
                    '‚úçÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:</b>')
        elif self.kwargs['payment'] == 'yoomoney':
            return ('<b>‚ôªÔ∏è –û–ø–ª–∞—Ç–∞ –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å—Å—è —á–µ—Ä–µ–∑</b> <a href="https://yoomoney.ru">YooMoney</a> \n'
                    '<b>‚ùó –í–∞–ª—é—Ç–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã:</b> <i>RUB</i>\n\n'
                    '‚úçÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:</b>')
        else:
            return ('<b>‚ôªÔ∏è –û–ø–ª–∞—Ç–∞ –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å—Å—è —á–µ—Ä–µ–∑</b> <a href="https://t.me/@tonRocketBot">xRocket</a> \n'
                    '<b>‚ùó –í–∞–ª—é—Ç–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã:</b> <i>RUB</i>\n\n'
                    '‚úçÔ∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–µ—Ç—É –¥–ª—è –æ–ø–ª–∞—Ç—ã:</b>')

    def create_buttons(self):
        back_payment_button = {ShortButton.BACK: 'payment'}
        if self.kwargs['payment'] == 'cryptobot' or self.kwargs['payment'] == 'yoomoney':
            return back_payment_button
        else:
            self.size = 2
            x_buttons = {}
            currencies = ["XROCK", "TONCOIN", "BTC", "USDT", "TRX", "ETH", "BNB"]
            for cur in currencies:
                x_buttons[cur] = f'x_cur:{cur}'
            return x_buttons | back_payment_button


class ForXrocket(CreatorMessages):
    def create_text(self):
        return ('<b>‚ôªÔ∏è –û–ø–ª–∞—Ç–∞ –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å—Å—è —á–µ—Ä–µ–∑</b> <a href="https://t.me/@tonRocketBot">xRocket</a> \n'
                f'<b>‚ùó –í–∞–ª—é—Ç–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã:</b> <i>{self.kwargs['currency']}</i>\n\n'
                '‚úçÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:</b>')

    buttons = {ShortButton.BACK: 'xrocket'}


class PaymentMessage(CreatorMessages):
    def create_text(self):
        amount = self.kwargs["amount"]
        currency = self.kwargs.get("currency")
        if currency is None:
            currency = "RUB"
        return f"<b>–û–ø–ª–∞—Ç–∏—Ç–µ {amount} {currency} –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ!</b>"

    def create_buttons(self):
        url = self.kwargs["invoice_url"]
        amount = self.kwargs["amount"]
        currency = self.kwargs.get("currency")
        if currency is None:
            currency = "RUB"
        return {f"–û–ø–ª–∞—Ç–∏—Ç—å {amount} {currency}": url,
                ShortButton.BACK: "payment"}


class UpBalance(CreatorMessages):
    def create_text(self):
        amount = self.kwargs['amount']
        return f"<b>–í–∞—à –±–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ —Å—É–º–º—É {amount} RUB</b>"

    buttons = ShortButton.BACK_PROFILE


class NoPayment(CreatorMessages):
    text = "<b>–ü–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ –≤–∞—à –ø–ª–∞—Ç–µ–∂ –Ω–µ –ø—Ä–æ—à–µ–ª –∏–ª–∏ –Ω–µ –±—ã–ª –æ–ø–ª–∞—á–µ–Ω.</b>"



# _______________________________________________________________________________________________________________________

# unique_page_messages

class MainMessageUnique(CreatorMessages):
    def create_text(self) -> Optional[str]:
        self.photo = False
        return ('<b>‚úç –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –µ–≥–æ —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏–∏:</b>\n\n'
                '<i>–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ</i>')


class GoodUniqueMessage(CreatorMessages):
    def create_text(self):
        self.photo = False
        counter = self.kwargs.get('counter', False)
        unique_text = self.kwargs['unique_text']
        if counter:
            return (f'<b>–£–Ω–∏–∫–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç - {counter}</b>\n\n'
                    f'<code>{unique_text}</code>')
        return ('<b>–£–Ω–∏–∫–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç</b>\n\n'
                f'<code>{unique_text}</code>')

    buttons = {'‚ùî –ü–µ—Ä–µ—É–Ω–∏–∫–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å?': 'unique_again'}


class WrongUniqueMessage(CreatorMessages):
    text = '<b>–í—ã –¥–æ–ª–∂–Ω—ã –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç!!!</b>'




# _______________________________________________________________________________________________________________________

# Discount page

class GetDiscountNameMessage(CreatorMessages):
    text = '<b>‚úç –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ —Å–∫–∏–¥–∫—É: </b>'




class DiscountActivateSuccess(CreatorMessages):
    def create_text(self):
        percentage = self.kwargs['percentage'] * 100
        return f"–í—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —Å–∫–∏–¥–∫—É {percentage}%!"


# _______________________________________________________________________________________________________________________

# Proxy page

class MainProxyPage(CreatorMessages):
    def create_text(self):
        return ('<b>‚ùóÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–∫—Å–∏:</b>\n\n'
                'üë®‚Äçüíª <u><b>Work mode</b></u> - <i>–æ—Ç–ª–∏—á–Ω–æ –ø–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è –≤–æ—Ä–∫–∞ üá™üá∫ Fiverr  –∏ '
                '–¥—Ä—É–≥–∏—Ö –ø–æ–¥–æ–±–Ω—ã—Ö –ø–ª–æ—â–∞–¥–æ–∫ –≥–¥–µ –≤–∞–∂–Ω–∞ —á–∏—Å—Ç–æ—Ç–∞ –ø—Ä–æ–∫—Å–∏, '
                f'—Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ <u>{settings.PRICE_PROXY} —Ä—É–±–ª–µ–π </u>–∑–∞ –ø—Ä–æ–∫—Å–∏.</i>\n\n '
                f'üó∫ <u><b>Work mode (sort)</b></u> - <i>—Å—Ç–æ—è—Ç –¥–æ—Ä–æ–∂–µ, –Ω–æ –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–±—Ä–∞—Ç—å —Å—Ç—Ä–∞–Ω—É '
                f'–ø—Ä–æ–∫—Å–∏. '
                f'–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ <u>{settings.COUNTRY_PRICE_PROXY} —Ä—É–±–ª–µ–π </u>–∑–∞ –ø—Ä–æ–∫—Å–∏.</i>\n\n'
                'ü§î <u><b>Scrolling</b></u> - <i>–ü—Ä–æ–∫—Å–∏ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –≤–∑—è—Ç—å –Ω–∞ –¥–ª–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ä–æ–∫, '
                '—á–∏—Å—Ç—ã–µ –∏ –∞–Ω–æ–Ω–∏–º–Ω—ã–µ, –ø–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ –±—Ä–∞—É–∑–µ—Ä–∞—Ö –∏ –¥–ª—è –ø–æ—Å–µ—â–µ–Ω–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∞–π—Ç–æ–≤.</i>')

    buttons = {'üë®‚Äçüíª Work mode': 'working',
               'üó∫ Work mode (sort)': 'sorted_work',
               'ü§î Scrolling': 'scrolling'}


class ChooseWorkProxy(CreatorMessages):
    text = (f'üè¶ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–∫—Å–∏: <u><b>{settings.PRICE_PROXY} —Ä—É–±–ª–µ–π.</b></u>\n'
            '‚è≤ –ñ–∏–∑–Ω—å –ø—Ä–æ–∫—Å–∏: <u><b>5 —á–∞—Å–æ–≤.</b></u>\n\n'
            '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–∫—Å–∏:')

    def create_buttons(self):
        self.size = 2
        items = [1, 3, 5, 7, 10, 15]
        buttons = {}
        for i in items:
            buttons[f'{i} —à—Ç.'] = f'work_proxy:{i}'
        return buttons | {ShortButton.BACK: 'shop'}


class ChooseSortProxy(CreatorMessages):
    def create_text(self) -> Optional[str]:
        return (f'üè¶ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–∫—Å–∏: <u><b>{settings.COUNTRY_PRICE_PROXY} —Ä—É–±–ª–µ–π.</b></u>\n'
                '‚è≤ –ñ–∏–∑–Ω—å –ø—Ä–æ–∫—Å–∏: <u><b>5 —á–∞—Å–æ–≤.</b></u>\n\n'
                '–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –ø—Ä–æ–∫—Å–∏:')

    def create_buttons(self) -> Optional[Union[list, dict]]:
        buttons = {}
        if len(Constant.PROXIES_SORT) > 3:
            self.size = 2
        else:
            self.size = 1
        for key, value in Constant.PROXIES_SORT.items():
            buttons[f'{countries_dict(key)[0:2]} - {len(value)} —à—Ç.'] = f"sort_country:{key}"
        return buttons | {ShortButton.BACK: "shop"}


class ChooseLenSortProxy(CreatorMessages):
    def create_text(self) -> Optional[str]:
        country_code = self.kwargs['country_code']
        return (f"–î–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–∫—Å–∏ –¥–ª—è {countries_dict(country_code)} - "
                f"{len(Constant.PROXIES_SORT.get(country_code, 0))}")

    def create_buttons(self) -> Optional[Union[list, dict]]:
        self.size = 2
        country_code = self.kwargs['country_code']
        items = [1, 3, 5, 7, 10, 15]
        buttons = {}
        for i in items:
            if 0 < len(Constant.PROXIES_SORT.get(country_code, 0)) >= i:
                buttons[f'{i} —à—Ç.'] = f'sort_proxy:{i}'
        return buttons | {ShortButton.BACK: f"sorted_work"}


class NotProxyMessage:
    text = "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø—Ä–æ–∫—Å–∏ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏!"
    text_no_work_proxy = "<b>–ü—Ä–æ–∫—Å–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –≤ WorkMode!!!</b>"
    text_no_sort_proxy = "<b>–ü—Ä–æ–∫—Å–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –≤ WorkMode (sort)!!!</b>"
    work_proxy_death = f"<b>–ü—Ä–æ–∫—Å–∏ {ShortButton.work} –ø–µ—Ä–µ—Å—Ç–∞–ª–∏ —Ä–∞–±–æ—Ç–∞—Ç—å</b>"
    sort_proxy_death = f"<b>–ü—Ä–æ–∫—Å–∏ {ShortButton.sort} –ø–µ—Ä–µ—Å—Ç–∞–ª–∏ —Ä–∞–±–æ—Ç–∞—Ç—å</b>"


class CheckingProxyText:
    text = "<b>–ò–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø—Ä–æ–∫—Å–∏!</b>"
    broken = "<b>‚ùå –ü—Ä–æ–∫—Å–∏ —Å–ª–æ–º–∞–ª–∏—Å—å!‚ùóÔ∏è</b>"


class ProxyMessage(CreatorMessages):
    def create_text(self) -> Optional[str]:
        proxy_list: list[Union[ProxyWork, ProxySort]] = self.kwargs['proxy_list']
        if len(proxy_list) > 7:
            return "<b>–í–≤–∏–¥—É –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞, –ø—Ä–æ–∫—Å–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Ñ–∞–π–ª–æ–º!</b>"
        else:
            message = "<b>–í–æ—Ç –≤–∞—à–∏ –ø—Ä–æ–∫—Å–∏:\n</b>"
            for proxy in proxy_list:
                message += f"\n<code>{proxy.host}:{proxy.port}:{proxy.username}:{proxy.password}</code>"
            return message


class MessageToAdminAfterBuy(CreatorMessages):
    def create_text(self) -> Optional[str]:
        username = self.kwargs.get('username')
        category = self.kwargs.get('category')
        count = self.kwargs.get('count')
        price = self.kwargs.get('price')
        return (f"‚ùóÔ∏è–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username}\n\n"
                "<b><u>–ü–æ–∫—É–ø–∫–∞ –ø—Ä–æ–∫—Å–∏</u></b>\n\n"
                f"<u>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</u>: <i>{category}</i>\n"
                f"<u>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–∫—Å–∏</u>: <i>{count}</i>\n"
                f"<u>–°—É–º–º–∞</u>: <i>{price} —Ä—É–±–ª–µ–π</i>\n"
                f"<u>–î–∞—Ç–∞</u>: {datetime.now().strftime('%d-%m-%Y %H:%M')}")


class ProxyLineNoPlan:
    for_error = "–ü–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ç–∞—Ä–∏—Ñ—É –ø—Ä–æ–∫—Å–∏ –Ω–µ—Ç!"
    for_not_proxy = "–¢–∞—Ä–∏—Ñ–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç!"


class ChooseTypeProxy(CreatorMessages):
    text = ('<b>‚ùóÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–∫—Å–∏:\n'
            '<u>IPv4 Privat</u> - –¥–æ—Ä–æ–≥–∏–µ –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–∫—Å–∏,\n'
            '–ø–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä '
            '–¥–ª—è –≤–æ—Ä–∫–∞ Facebook üá™üá∫ \n\n'
            '<u>IPv6 Privat</u> - –¥–µ—à–µ–≤—ã–µ –ø—Ä–æ–∫—Å–∏,\n'
            '–æ—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω–æ–π —Ä–∞–±–æ—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ,\n'
            '—Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ 12 —Ä—É–±–ª–µ–π</b>')

    def create_buttons(self) -> Optional[Union[list, dict]]:
        self.size = 2
        return {
            'üåç IPv4 private': 'ipv4',
            'üåç IPv6 private': 'ipv6',
            ShortButton.BACK: 'shop',
        }


class MainPageProxyLine(CreatorMessages):
    def create_text(self) -> Optional[str]:
        ip_version = self.kwargs.get("ip_version")
        return (f'–í—ã –≤—ã–±—Ä–∞–ª–∏ üåç IPv{ip_version} private\n\n'
                '‚ùóÔ∏è –í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è!\n\n'
                '–ò–∑-–∑–∞ —Å–ª–æ–∂–∏–≤—à–µ–π—Å—è –≤ –º–∏—Ä–µ —Å–∏—Ç—É–∞—Ü–∏–∏ –Ω–∞–±–ª—é–¥–∞—é—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:\n'
                '–ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ RU –ø—Ä–æ–∫—Å–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç –∏–∑ –£–∫—Ä–∞–∏–Ω—ã\n'
                '–≠—Ç–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –æ—Ç –Ω–∞—Å –Ω–µ –∑–∞–≤–∏—Å—è—Ç, –∏—Ö –≤–≤–µ–ª–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã —Å—Ç—Ä–∞–Ω.\n'
                '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ VPN —Ç—Ä–µ—Ç—å–µ–π —Å—Ç—Ä–∞–Ω—ã –º–µ–∂–¥—É –≤–∞—à–∏–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º –∏ –ø—Ä–æ–∫—Å–∏.'
                '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ. –í—Å–µ–º –º–∏—Ä–∞!\n\n'
                '–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –ø—Ä–æ–∫—Å–∏:')

    def create_buttons(self) -> Optional[Union[list, dict]]:
        ip_version = self.kwargs.get("ip_version")
        if ip_version == 4:
            callback_data = self.kwargs['callback_data']
            back_page = self.kwargs['back_page']
            return pagination(callback_data=callback_data, back_page=back_page)
        else:
            self.size = 2
            return {f'{countries_dict("ru")}': 'country:ru',
                    f'{countries_dict("us")}': 'country:us',
                    ShortButton.BACK: 'scrolling'}


class ChoiceCountry(CreatorMessages):
    def create_text(self) -> Optional[str]:
        new_order = self.kwargs.get("new_order")
        return (f"–í—ã –≤—ã–±—Ä–∞–ª–∏: üåç IPv{new_order.ip_version}\n"
                f"–°—Ç—Ä–∞–Ω–∞: {countries_dict(new_order.country)}\n\n"
                "‚ùóÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–≤ –¥–Ω—è—Ö)!")

    def create_buttons(self) -> Optional[Union[list, dict]]:
        new_order = self.kwargs.get("new_order")
        self.size = 2
        return {
            '5': 'period:5',
            '10': 'period:10',
            '20': 'period:20',
            '30': 'period:30',
            ShortButton.BACK: f'ipv{new_order.ip_version}:0',
            ShortButton.MAIN_PAGE: 'shop'
        }


class PreviewMessage(CreatorMessages):
    def create_text(self) -> Optional[str]:
        new_order = self.kwargs.get("new_order")
        price = self.kwargs.get("price")
        return ('–í–∞—à –∑–∞–∫–∞–∑:\n\n'
                f'üó∫ –°—Ç—Ä–∞–Ω–∞: {countries_dict(new_order.country)}\n'
                f'üåê –¢–∏–ø: IPv{new_order.ip_version} private\n'
                f'üïñ –°—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã: {new_order.period} –¥–Ω–µ–π\n'
                f'ü§å –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {new_order.quantity} —à—Ç.\n\n'
                f'üßæ –¶–µ–Ω–∞: {price} RUB\n')

    def create_buttons(self) -> Optional[Union[list, dict]]:
        discount = self.kwargs.get("discount")
        new_order = self.kwargs.get("new_order")
        keyboard = {"ü§ë –ö—É–ø–∏—Ç—å": "buy_proxy"}
        discount_button = {}
        if discount is not None:
            discount_button = {"–ö—É–ø–∏—Ç—å —Å–æ —Å–∫–∏–¥–∫–æ–π": "buy_with_discount"}
        back_button = {"üîô –ö –≤—ã–±–æ—Ä—É —Å—Ç—Ä–∞–Ω—ã": f"ipv{new_order.ip_version}",
                       ShortButton.MAIN_PAGE: "scrolling"}
        return keyboard | discount_button | back_button


class ProxyLineWork(CreatorMessages):
    text = "<b>–¢–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –ø–æ–∫—É–ø–∞—Ç—å –ø—Ä–æ–∫—Å–∏!</b>"




if __name__ == '__main__':
    print(IfUserBlocked.__dict__)
